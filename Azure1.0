Azure VM -> Windows and Linux based machine
           Amount of CPU, memory, disk is required, underlying OS, Server based machine,
e.g. Wifi router is a network.
A network allows devices to communicate with each other.

RG -> logical grouping of resources.

appadmin
Admin@123456

VM-> [subnet, PublicIP_Addres], [OS_lvl disk], NSG (filter incoming and outgoing traffic),

Native RDP -> This is for windows based machines.
RDP (Remote Desktop Protocol) is for Windows based machine and not for Linux machines.

When VM is created, then NetworkWatcher with new RG is also created, this has no cost as of now associated.

Laptop sends a request via internet on to public IP Address, and assign to VM.

Size: 1 cpu, 1 gb memory (RAM) is not sufficient.

How we host server on Windows Server based machine ?? -> Machine in placed, We r going to install IIS on machine, this will make machine behave as a Web Server.

Go to VM -> Server manager -> Dashboard -> Add roles & features -> Next -> InstallationType: Roll based -> Next -> 
Next -> Server Roles: Web Server (IIS) -> Next -> Next -> Install-> Close

Remember VM is only getting created using azure portal, after that it is our responsibility what we want to do with this. 
Go to Virtual Machine -> copy public ip address and paste to browser -> web server listens to port 80 (def) ->
Browser to web server on VM-> port 80 on VM -> but not working -> coz NSG is light firewall..=> Network settings -> NSG -> Add Inbound port rule -> Source:Any, Service: HTTP, port:80, Add -> Refresh the page.
-> browser shows default IIS Page.

**Azure Region -> is a geographic location that has one or more data centers.

The VM costs minute basis. NSG no charge. VN is freee of charge. ip address and Disk has some charges.

VM Sizes => Diff series available based on ur reqt. LOW cost: Bs Series, Gen purpose:D Series, more power: F series. 
At the EOD u can stop the machine or delete the resource for cost saving.

** create LINUX based machine, connect -> "Native SSH" is used to connect to LINUX VM. 
shows command to connect 
on cmd prompt > ssh username@publicIPAddress
Putty is also used to connect Linux VM. Download putty tool,
sude apt install nginx

*****
Subscription -> Usage + Quotas ->

*** Disk (05 disk, Data disk)
U can create additional data disk attached to VM,
Standard HDD -> low cost option
Standard SSD (Solid state drives)
Premium SSD
Premium SSD v2
Ultra disk -> high cost

Azure Managed Disk -> These r block-level storage volumes that are managed by azure.
U can create and attach disks to machine either during launch of machine or after the machine is created.
Each VM will come with an OS disk. This will have OS installed on it. u can create additional Data disks and attach it to VM.

A machine can also get temporary disk. The size depends on the machine size. The data on this disk can be lost during maintenance event, or when u redeploy a VM or 
when u stop the machine.

**Adding Data disks
We can do this while creating VM or after creation of VM.

Add data Disks.
Connect VM -> Server manager -> File and storage Services -> select Disk -> Right click on newly created Data disk and Initialize, Next step is "New Volume" 
to the same -> then u will be able to see Data disk in partition.

Data disk; Temporary disk ->

Stop the VM(deallocating the VM -> deallocating from physical host, no capacity on physical host, )
Start the VM(same physical host or diff)
Connect VM -> lost data from Temporary disk, Data disk persist.

Shut down from machine -> partial shutdown -> not complete deallocate -> bear some cost, u will not lose data from temporary disk.

***Disk Snapshot -> read-only copy of Hard disk
u can also create a new disk from the snapshot.

How to create Disk Snapshot ? -> Go to the data-disk itself -> Select "Create Snapshot" -> like back up copy read only -> create -> go to resource -> create a disk using this snapshot.

Attach existing disk to VM (VM -> Disks)

***Detaching data disk from VM is also possible.

***Azure Disks (Server Side Encryption) ->
Encryption is happened at background.
Server side encryption -> Here the disks are encrypted with azure storage encryption. You can use either platform managed keys or customer managed keys.
U can use the azure key vault service to store the encryption keys that can be used as customer managed keys.

**Azure Key Vault ->
1. deploy keyvault,
[ what we r doing-> Manage encryption using encryption key in keyvault ]
2. KV->Access Control -> Add role assignment -> Key vault administrator to the current user -> Assign
3. Generate Key inside AppVault
4. Disk Encryption set on keyvault or using it
Go to VM -> Detach data disk -> Go to individual Data disk -> Encryption -> Under Key management: select ur encryption set -> Save 
5. Attach Disk to VM

***Azure Disk Encryption ->
Go to VM -> Additional Setting and encrypt

***Custom Script Extensions => This feature can be used to download & run scripts on azure VM.
These script could reside in azure storage or GitHub.
This is useful if u want to run any task post the deployment of the VM.
Ensure the script don't require any user input when they run.
These run in background and These script is allowes 90 mins to run.
E.g. Application needs to be hosted on machine.
e.g.2. Earlier we saw how we could install IIS on machine. This is done manually. Now we r going to create PowerShell script file that will automate the installation of IIS. 
When creating machine we will use custom script extensions to pick up the powershell script file to perform required installation.

*** (Upload PS script file)
Storage Acc-> Create ; create container; inside container upload file;
(Now we have to automate this)
create VM -> Select inboud port: HTTP(80), RDP (3389) -> Next -> "Advanced" section -> Extensions-> select extension to install -> custom script extention -> next -> 
Browse the file from container -> create.
create VM.

***Azure Boot diagnostics
Bydaefault it is enabled. This is debugging feature in case machine is not booting.
Better understanding why machine is not starting.

***VM: RUN command on existing machine -> Manually run
Go to VM -> Operations -> RUN Command -> RunPowershellScript -> add Powershell script -> RUN -> (Here u can see the result of the script as well)

import-module servermanager
add-windowsfeature web-server -includeallsubfeature

***Redeploy VM
Help -> Redeploy+reapply -> redeploy -> deallocate the machine and allocate to physical host.

***Availability Sets (Fault domain, Update Domain) (in one DC) 
Redundancy options, High availability in place
E.g. E-commerce application, If VM go down (underlying infra has issues), azure do it best by providing redundancy option in place. Small downtime can cost severe impact,
MS also needs to update the physical server, Security update to keep it secure. when they do update then restart required of physical server. then application. Avail of application, 2 or more machine same application, users goes to either server, (how traffic is directed is another thing) multiple machine hosting application, 
VM either diff or same physical server,
goes wrong, both machines not available, one machine down then other available. can do with help of avaiABI set.
Fault domain, Update Domains

Failure could be
1. Underlying infrastructure failed unexpectedly. network failure, local disk failure, rack failures.
2. Planned maintenance events -> Wherein MS needs to make planned updates to the underlying physical envt. in such cases reboot might be reqd on ur VM.

No additional cost for Availability sets.

Availability Set -> This is a "logical grouping of machines" that helps to reduce the chances of multiple VM's going down because of hardware issues.
TO make use of availability sets, u need to deploy a VM to an availability set. You can just create an Availability Set & deploy the machine to the set.
The machine can only be part of a set when machine is created.
The VM is placed as part of fault & update domain in the availability set. so that they can't fail together.

FAult Domain-> this helps to define a group of machines that share a common power source and network switch. You can have up to 3 fault domains.
Update Domain -> This helps to signify the group of VMs and physical hosts that can be rebooted at the same time. You can have up to 20 update domains.
FD0   FD1   FD2
 |     |     |
UD1   UD2   UD3
UD4   UD5   UD1

**Availability Zones (no cost with AZ but there is bandwith cost) This is only to provide redundancy at infra level not data. 
Entire DC goes down, then we can use Avai Zones.
An Availability Zone is a group of DC's. There are fast links across Availability Zones to ensure low latency. An azure region has multiple Avai zones.

Diff DC.

****VMSS -> This service helps u to create and manage a group of load balanced VM's. "The number of VM's can then grow based on demand or on a schedule."
(allows u to scale based on demand.)
e.g. Ecommerce application, increase machines when load is high, when sale is lower then lower the machines. Manually increase and delete machines.
Allows
Orchestration: Uniform, Flexible

Uniform -> VM were managed by scaleset itself, could not see ind VM. could not see in the VM blade.
Flexible -> Able to work with each Virtual machine independently; we can create a VM' using VMSS with Flexible orchestration.

**VMSS -custom script
Upload a script file in storage container.
Create VMSS -> after complete deployment .
Go to Settings -> Extenstions + Applications -> add -> custom script extension -> browse the script file -> select -> create
[It will not apply custom script directly to VMSS. reason? coz multiple machine VMSS, u want to happen in gradual manner coz it could break the application.] 
For this, go to instances -> select all VMSS -> Upgrade -> SAve (now the script is getting execute on these machines).

Check on Lab
--------------
1. Does VMSS has RUN Command Option
2. Create Key Vault and use it.

***Virtual machine Images (create ur own image)
Let's say that u have a Virtual machine that has an application in place and other tools and services as well.
Now let's say that u want to create more VM's that has the same set of applications, tools and services.
You could use custom script extensions to install the applications, tools etc. But it could take time to have the machine in place if the installation process takes time.

"Instead you can build your own custom image and then create machines based on the image.
->The image can have a copy of the full VM that include the data disks."
You can create an image and place as part of the Azure compute gallery.
U can share the azure compute gallery across ur organization so that other users can create VM on the images from Gallery.

2 types -> Generic VM Image and specialized VM Image
-> In Specialized VM Images, information about specific users & machine info is retained whereas with Generic VM images information is removed.
-> In Specialized VM image, new VMs will have the same computer name and admin user information whereas with generic VM image, we need to perform process of 
generalization, after this the original VM will be unusable.

LAB1: VM create with IIS running on the machine and default.html page.
            GO to VM -> select "Capture" -> create an image -> Yes, share it to gallery -> Target Azure compute Gallery: Create New -> CompanyGallery -> Specialized image -> 
            Target VM Definition: Ok -> Add version number -> Create.

LAB2: Using Specialized Image->
      Go to VM -> Image: See all images -> Select Shared images from LHS -> could not mention username & password (option is not provided) -> same VN is provided 
      -> Allow traffic on HTTP: port 80 -> Create.

LAB3: Create Generalized Image (all of hardcoded attribute comp name, uname, paswd are removed)
       Follow certain steps -> Login to VM -> delete Panther directory(c:\windows\Panther), Go to regedit -> check key: start:1, -> Execute command -> shutdown machine.
       Go to VM --> Capture image -> Select Compute Gallaery -> Generalized image -> Create Target image definition -> add version number -> create

LAB4: Create VM using marketplace recently created
      Create VM -> ad VM name -> add username & paswd -> Network already in placed -> create

***Proximity Placement Groups
(least latency:VM located closed to each other.)
When we create multiple VMs as part of VMSS, then machines could be located in different DC's. Which physical host which host doesnot have uc control. 
Sometimes an applicatio wants the ultile VMs to be located closed together to get least latency when it comes to communication between the VMs.
By placing the Vms as part of proximity group, the VMs will be physically located close to each other.

Create Proximity Placement Group -> create
Create VM -> Advanced -> chose Proximity placement Groups -> create.

***Deployments
[Can see history of deployments.]
RG -> Settings -> Deployments -> All deployment against this RG -> get details of deployment -> and also redeploy.

** Azure Web Apps
Once u have IIS web server on machine, then u can deploy ur code(.net application) in the machine.
Another web service i.e. web app. This is managed service, here the VM & physical infrastructure is managed for you. There is support for web applications based on .NET, Java, Node.js, PHP, Python. 
Here the patching of the framework & the OS is managed by the service.

[ Dont install ISS web server only deploy web app whole virtual infra is managed for you. Automatically get high availability. dont want burden of managing VM then use web app.]
-> But if u need to host a custom application that needs to be installed, then you would probably need to use the Azure VM service.

Lab: Azure Web App -> Select Web App -> Publish: Code, RuntimeStack: .Net8 (LTS), OS: Windows, (need compute machine to host application), AppServicePlan: FreeF1,
-> Monitor+Secure -> Enable Application Insights: No -> Create {.net is installed}

**Making simple changes to web app
{Create HTML file in Web app}
Go to Web app -> Devt Tools -> App Service Editor -> Open Editor -> wwwroot/ create a new file default.html -> Inside Default.html add -> <h1>This is web application</h1> 
-> Saved automatically -> refresh the DNS name -> and u can see the contents from default.html

*** App Service Plan
This will give u required infrastructure for hosting web app.
Free F1 -> 60 mins/day to access azure web app. Here shared infrastructure.
Click on pricing plan -> Hardware View and Feature View-> Dev/test, Production (premium), Legacy (Premim, Standard).
We can host another web app on the same app service plan.

**Azure Web App - Deployment Slots [Production web slot, Staging web slot]
prod based application that published on web app. users are using it. you have revision new features, bug fixes. newer version that needs to be published. Test the application. 
Now u can't publish this inside web app because u have production version there. u have to publish newer version somewhere else so the user can test newer version of application.

What we can do ?
1. create a new web app
2. Deploy the newer application
3. test the application
3. test the application
4. Publish the application after successful testing to the primary azure web app.

Instead of this, we can make use of deployment slots. This feature is available with Standard, premium and isolated App Service Plan.
Main application is deployed on production slot, u can create STAGING web slot withing web app itself and publish newer application. Eaach slot is live web application 
with its own host name. once testing is completed, u can perform swap.

Then at any point in time, u can swap the slots. So that the newer version of the application runs as part of the production slot. 
This helps in first testing of the application in the staging slot & then swaping the slots at any point in time.
It also helps in recovery from failure. If the swap succeeds, but the newer version of application is not working, u can easily swap back at any point in time.

**Lab
Go to Web app-> Deployment -> Deployment Slot -> This is required premium or standard service plan. so change the app service plan. -> For this go to settings ->
Scale Up Plan -> Select Standard S1 -> Upgrade. (check in overview section for new plan)
Go to deployment -> Deployment Slot -> Add Slot -> Name: staging, -> Add. (adding another web app instance within the same web app itself)
Go to deployment -> u can see two slots -> open staging in new tab -> like another resource in place.
How to perform swap ?-> Go to deployment slot -> Select SWAP -> Start swap.

65- 80 ->, Containers
**Autoscaling for web app
with basic app service plan or higher, u have dedicated machines that can be used to host ur web app.
U wanted to host multiple azure web apps with same app service plan. Basic App Service plan, u can have a maximum of 3 virtual machines running ur azure web aps.
Scaling -> 1 machine as app service plan, manually scale infra from 1 to 3 machines. cost is higher.
On demand -> available with standard plan. max 10 machine and add rule.

Basic App Service plan, u can have a maximum of 3 virtual machines running up azure web apps. machines are used to host web application.
Standard plan-> configure auto scaling based on rules. max 10 machines.
Premium plan > configure automatic scaling based on traffic.

Go to web app -> settings -> Scale out -> scale out method: manual (based on traffic)/rule. -> Rule based -> configure -> custom auto scale -> scale based on a metric -> add a rule -> ..

66 to 80
15 sessions -> 4 hours.
**The need for containers
Host container based applications.
Docker -> tool/technology for creating & deploying container based applications.

VMs runs on physical servers, Host OS on physical server, virtulato for hosting VMs, Hosting applications on VMs.
VMs is isolated from each other.
"Problem" -> Developer devp app on their local machine. deployed on VM then it does not work as intended. This could be coz of differences in machine software configuration, libraries not present etc.
2 applications on same machine. 
Both application on same VM.
To address this issues, we have container. "This is a unit of software that packages up all the code and dependencies that are required for the application to run." 
Ur application run in isolation within its own container, It has required underlying OS, reqd libraries, and configuration to run the application. u can run multiple 
applications on same VM. coz they run in isolation coz each application has its own container.

Each container has => Underlying OS + Libraries + Configuration

***Deploying Docker on a VM ->
[If u wanted to host a web application on VM, we could first need to install a Web Server & then host our web application.]
(first install Docker toolset on VM, )
LAB: Deply VM -> connect VM -> login -> Install all pre-requisites for docker toolset (command list get from internet & execute) -> install Docker.

***Running the nginx container on the Linux VM
sudo docker run nginx -> (On docker we have marketplace nginx image) check nginx docker based image, if not found locally then the download from dockerHUB. 

Request to VM -> thenDocker.

***Image Registry
Create a resource based on azure container registry.
Need of service ? ->
1. There are readymade images available on Docker Hub. Docker image is taken from Docker Hub. DockerHub is an online registry that's available that has all of the images that are published by different vendors in marketplace.
2.U can use these images to run conatiners.
3. We have our application, then create something known as build, a runnable version of application, and then package it as a docker based image (use docker to first create an image that would contain or application). 
Once image is placed then we can run a container out of that image and hence run the application. 
4. Azure container registry

{create build, package it to docker based image, run a container out of image}

Lab:1. Go to marketplace -> create container registry -> Name, pricing plan:std -> create.
This is ur private registry which u can use for hosting ur docker based images.
2. Go to registry -> services -> Repositories -> u can see here docker based images -> no images as of now. 
3.Settings -> Access keys -> enable

*** Containerize your application
ex. how u can containerize ur own application within docker based image, and then run it as a container.

code.visualstudio.com -> run VS code

**Container instances service
create instance -> select azure container registry ->

80 to 148

Container
-----------------------
Services that help us host container based application.
Docker -> creating and deploying container based application/workload. 
Multiple applications on same VM itself.
Problem with VM ? ->
1. When u deploy ur application on VM then they does not work as intended (Actual laptop dev is using and the VM which host the application).
This could be coz of machine difference and libraries not present.
2. two application on the same machine. one application requires a library/component to be installed. This causes other application to stop working.

To address this problem, we have containers.
Containers -> It is unit of software that packages up all the code and dependencies that are required for the application to run.

Fach container runs in isolation.
Container = configuration + libraries + OperatingSystem -> all are lightweight.

LAB -> Deploying Docker on VM.

Install docker on VM. and just issue simple command to container in place.
1. DEPLOY Linux VM.
2. Install Docker for hosting containers.

Simple Scenario :- If u want to host web application. then first install web server, and then host our web application.

Host nginx web server via docker based container.

Step 1. Install Docker toolset on azure VM.
2. download image(template). Docker based images k/as Docker HUB.
3. and then run container out of that image.

Lab 
1. Deploy Linux based machine. Standard B2s
2. Install Docker on machine itself.









